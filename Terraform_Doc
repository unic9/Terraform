#####Terraform documentation:-

#To create a provide (for example aws)

provider "aws" {
  region = "ap-south-1"
  access_key = "AKIA4IUCI5TNSXBXNY5Q"
  secret_key = "FnoVMIsiTmENAih9kGt5or2cnTma/GnmGZq6CxLV"
}

#To create Ec2

resource "aws_instance" "instancename" {
  ami           = "ami-fhfsjjh4jd887h489j5899" #(#ami id we should paste according to the required os)
  instance_type = "t3.micro"
  count         =10 #(#if u want more instances)
  tags = {
    Name = "Cloudinstance"
  }
}

#Commands

terraform init => it will initialise and download the provider plugins 
terraform plan => before hand it will show the things its going to create and also shows the errors
terraform apply => it will ceate or change the defined parameters which we describes in the code . for example creating an instance
terraform destroy => it will destroy what ever the resources it created


############ EXAMPLE :- created instance with ec2, security group, elastic IP, key pair

provider "aws" {
  region     = "ap-south-1"
  access_key = "AKekjdhfudjfcldhihfouwh"
  secret_key = "KCn8jhdfkdsgcxlikdhiufhlshilfj"
}


resource "aws_instance" "myec2" {
  ami = "ami-068d43a544160b7ef"
  instance_type = "t3.micro"
  key_name = "practiceterraform"
  vpc_security_group_ids = [aws_security_group.practicesg.id]

tags = {
    Name = "Cloudinstance"
  }
}

resource "aws_key_pair" "practicekeypair" {
  key_name   = "practiceterraform"
  public_key = "ssh-rsa AAAABAPUYdW+AHP2HiFdyW1YDPiOP2opy2/FlbzPYnSnl7M8bNy0n3A6Gu9AGK9Vk= kiransmac@kirans-MacBook-Pro.local"
}

resource "aws_eip" "practiceeip" {
  instance = aws_instance.myec2.id
  vpc      = true
}

resource "aws_default_vpc" "default" {
  tags = {
    Name = "Default VPC"
  }
}

resource "aws_security_group" "practicesg" {
  name        = "cloudsg"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_default_vpc.default.id

  ingress {
    description = "TLS from VPC"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "cloudsg"
  }
}
########

Vriables Topic

Lab example terraform-practice 

##If we dont mention terraform.tfvars with actual name and mentioned with some other name like demo.tfvars, it wont pickup the values. If we want with the demo.tfvars we can mention during terraform plan or apply like => terraform plan -var-file="demo.tfvars"
## If not we can replace terraform.tfvars directly with demo.auto.tfvars
###If not the third way we can directly mention with terraform plan ,.. like ,.. terraform plan -var="instancetype=t2.micro" -var="image=am-jhguyfvjhj"
####Anf the fouth way is by exporting the value with command => export TF_VAR_instancetype=m2.large and =>TF_VAR_image=ami-jgdjhfuyjgh (its temporary in bast if we logout of the terminal the value will dissapear, if we want in permanent we shouls store in bash)

########

Conditional Topic

provider "aws" {
  region     = "ap-south-1"
  access_key = "AKIAX33BFDID43C7W4VV"
  secret_key = "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"
}

variable instancetype {
  type = map
  default = {
    "dev" = "t2.small"
    "test"= "t2.medium"
    "prod"= "t2.large"
  }
}

variable image {
  type = list
  default = ["ami-068d43a544160b7ef","ami-0a9d27a9f4f5c0efc","ami-0d758c1134823146a"]

}

variable input { }

resource "aws_instance" "dev" {
  instance_type = var.instancetype ["dev"]
  ami = var.image[0]
  count = var.input == "dev" ? 1:0
 ## count = var.input > "2" ? 4 : 0 ###count = var.input != "" ? var.input  :3 (when we want a perticular value we get that value ifnot we get default value for ex in this cas 3)

  tags = {
    Name = "dev-department"

  }
  
}

resource "aws_instance" "test" {
  instance_type = var.instancetype ["test"]
  ami = var.image[1]
  count = var.input == "test" ? 3:0

  tags = {
    Name = "dev-department"

  }
  
}

resource "aws_instance" "prod" {
  instance_type = var.instancetype ["prod"]
  ami = var.image[2]
  count = var.input == "prod" ? 6:0

  tags = {
    Name = "prod-department"

  }
  
}
####
